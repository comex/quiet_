diff --git a/include/clang/AST/Type.h b/include/clang/AST/Type.h
index 369ce6dfa1..af7d352fc8 100644
--- a/include/clang/AST/Type.h
+++ b/include/clang/AST/Type.h
@@ -1629,6 +1629,7 @@ protected:
 
     /// An AttributedType::Kind
     unsigned AttrKind : 32 - NumTypeBits;
+
   };
 
   class AutoTypeBitfields {
diff --git a/include/clang/Basic/Attr.td b/include/clang/Basic/Attr.td
index 83a95cec90..8d4daa7df0 100644
--- a/include/clang/Basic/Attr.td
+++ b/include/clang/Basic/Attr.td
@@ -90,6 +90,7 @@ def NonBitField : SubsetSubject<Field,
                                 [{!S->isBitField()}],
                                 "non-bit-field non-static data members">;
 
+
 def NonStaticNonConstCXXMethod
     : SubsetSubject<CXXMethod,
                     [{!S->isStatic() && !S->isConst()}],
@@ -356,6 +357,7 @@ class AttrSubjectMatcherSubRule<string name, list<AttrSubject> subjects,
   // attribute to be applicable. If empty, the language options are taken
   // from the parent matcher rule.
   list<LangOpt> LangOpts = [];
+  bit Abstract = 0;
 }
 class AttrSubjectMatcherRule<string name, list<AttrSubject> subjects,
                              list<AttrSubjectMatcherSubRule> subrules = []> {
@@ -365,6 +367,7 @@ class AttrSubjectMatcherRule<string name, list<AttrSubject> subjects,
   // Lists language options, one of which is required to be true for the
   // attribute to be applicable. If empty, no language options are required.
   list<LangOpt> LangOpts = [];
+  bit Abstract = 0;
 }
 
 // function(is_member)
@@ -374,6 +377,7 @@ def SubRuleForCXXMethod : AttrSubjectMatcherSubRule<"is_member", [CXXMethod]> {
 def SubjectMatcherForFunction : AttrSubjectMatcherRule<"function", [Function], [
   SubRuleForCXXMethod
 ]>;
+
 // hasType is abstract, it should be used with one of the sub-rules.
 def SubjectMatcherForType : AttrSubjectMatcherRule<"hasType", [], [
   AttrSubjectMatcherSubRule<"functionType", [FunctionLike]>
@@ -381,7 +385,10 @@ def SubjectMatcherForType : AttrSubjectMatcherRule<"hasType", [], [
   // FIXME: There's a matcher ambiguity with objc methods and blocks since
   // functionType excludes them but functionProtoType includes them.
   // AttrSubjectMatcherSubRule<"functionProtoType", [HasFunctionProto]>
-]>;
+]> {
+  bit Abstract = 1;
+}
+
 def SubjectMatcherForTypedef : AttrSubjectMatcherRule<"type_alias",
                                                       [TypedefName]>;
 def SubjectMatcherForRecord : AttrSubjectMatcherRule<"record", [Record,
@@ -430,6 +437,8 @@ def SubjectMatcherForBlock : AttrSubjectMatcherRule<"block", [Block]> {
   let LangOpts = [BlocksSupported];
 }
 
+def SubjectMatcherForFunctionType : AttrSubjectMatcherRule<"function_type", []>;
+
 // Aggregate attribute subject match rules are abstract match rules that can't
 // be used directly in #pragma clang attribute. Instead, users have to use
 // subject match rules that correspond to attribute subjects that derive from
@@ -1899,6 +1908,7 @@ def SwiftCall : DeclOrTypeAttr {
   let Spellings = [Clang<"swiftcall">];
 //  let Subjects = SubjectList<[Function]>;
   let Documentation = [SwiftCallDocs];
+  let PragmaAttributeSupport = 1;
 }
 
 def SwiftContext : ParameterABIAttr {
@@ -1958,6 +1968,11 @@ def PreserveAll : DeclOrTypeAttr {
   let Documentation = [PreserveAllDocs];
 }
 
+def DefaultCall : DeclOrTypeAttr {
+  let Spellings = [Clang<"defaultcall">];
+  let Documentation = [PreserveAllDocs]; // XXX
+}
+
 def Target : InheritableAttr {
   let Spellings = [GCC<"target">];
   let Args = [StringArgument<"featuresStr">];
@@ -2066,7 +2081,7 @@ def TransparentUnion : InheritableAttr {
   let Spellings = [GCC<"transparent_union">];
 //  let Subjects = SubjectList<[Record, TypedefName]>;
   let Documentation = [TransparentUnionDocs];
-  let LangOpts = [COnly];
+  //let LangOpts = [COnly];
 }
 
 def Unavailable : InheritableAttr {
diff --git a/include/clang/Sema/ParsedAttr.h b/include/clang/Sema/ParsedAttr.h
index 7561e83574..0b49b0ae8e 100644
--- a/include/clang/Sema/ParsedAttr.h
+++ b/include/clang/Sema/ParsedAttr.h
@@ -549,6 +549,7 @@ public:
   bool hasVariadicArg() const;
   bool diagnoseAppertainsTo(class Sema &S, const Decl *D) const;
   bool appliesToDecl(const Decl *D, attr::SubjectMatchRule MatchRule) const;
+  bool appliesToType(const QualType &T, attr::SubjectMatchRule MatchRule) const;
   void getMatchRules(const LangOptions &LangOpts,
                      SmallVectorImpl<std::pair<attr::SubjectMatchRule, bool>>
                          &MatchRules) const;
diff --git a/include/clang/Sema/Sema.h b/include/clang/Sema/Sema.h
index e1e6dae3ad..0c7c2e96c5 100644
--- a/include/clang/Sema/Sema.h
+++ b/include/clang/Sema/Sema.h
@@ -3346,7 +3346,8 @@ public:
   void ProcessDeclAttributeDelayed(Decl *D,
                                    const ParsedAttributesView &AttrList);
   void ProcessDeclAttributeList(Scope *S, Decl *D, const ParsedAttributesView &AL,
-                             bool IncludeCXX11Attributes = true);
+                             bool IncludeCXX11Attributes = true,
+                             bool FromPragma = false);
   bool ProcessAccessDeclAttributeList(AccessSpecDecl *ASDecl,
                                    const ParsedAttributesView &AttrList);
 
@@ -8480,8 +8481,12 @@ public:
   /// '\#pragma clang attribute push' directives to the given declaration.
   void AddPragmaAttributes(Scope *S, Decl *D);
 
+
   void DiagnoseUnterminatedPragmaAttribute();
 
+  QualType GetFunctionTypeForImplicit(QualType ResultTy, ArrayRef<QualType> Args,
+                                      const FunctionProtoType::ExtProtoInfo &EPI);
+
   /// Called on well formed \#pragma clang optimize.
   void ActOnPragmaOptimize(bool On, SourceLocation PragmaLoc);
 
diff --git a/lib/AST/Type.cpp b/lib/AST/Type.cpp
index 1b4b84d030..1320638e4c 100644
--- a/lib/AST/Type.cpp
+++ b/lib/AST/Type.cpp
@@ -3217,6 +3217,7 @@ bool AttributedType::isCallingConv() const {
   case attr::IntelOclBicc:
   case attr::PreserveMost:
   case attr::PreserveAll:
+  case attr::DefaultCall:
     return true;
   }
   llvm_unreachable("invalid attr kind");
diff --git a/lib/AST/TypePrinter.cpp b/lib/AST/TypePrinter.cpp
index fe05127c7f..381d0e8b68 100644
--- a/lib/AST/TypePrinter.cpp
+++ b/lib/AST/TypePrinter.cpp
@@ -1501,6 +1501,7 @@ void TypePrinter::printAttributedAfter(const AttributedType *T,
   case attr::PreserveAll:
     OS << "preserve_all";
     break;
+  case attr::DefaultCall: OS << "defaultcall"; break;
   }
   OS << "))";
 }
diff --git a/lib/Basic/Targets/PPC.h b/lib/Basic/Targets/PPC.h
index 439c73a0e3..10704cca9c 100644
--- a/lib/Basic/Targets/PPC.h
+++ b/lib/Basic/Targets/PPC.h
@@ -341,6 +341,15 @@ public:
     // This is the ELF definition, and is overridden by the Darwin sub-target
     return TargetInfo::PowerABIBuiltinVaList;
   }
+
+  CallingConvCheckResult checkCallingConvention(CallingConv CC) const override {
+    switch (CC) {
+    case CC_Swift:
+      return CCCR_OK;
+    default:
+      return CCCR_Warning;
+    }
+  }
 };
 
 // Note: ABI differences may eventually require us to have a separate
diff --git a/lib/CodeGen/TargetInfo.cpp b/lib/CodeGen/TargetInfo.cpp
index ada42fd2ae..d462b6d65f 100644
--- a/lib/CodeGen/TargetInfo.cpp
+++ b/lib/CodeGen/TargetInfo.cpp
@@ -653,9 +653,9 @@ Address EmitVAArgInstr(CodeGenFunction &CGF, Address VAListAddr, QualType Ty,
 /// details. This implementation provides information which results in
 /// self-consistent and sensible LLVM IR generation, but does not
 /// conform to any particular ABI.
-class DefaultABIInfo : public ABIInfo {
+class DefaultABIInfo : public SwiftABIInfo {
 public:
-  DefaultABIInfo(CodeGen::CodeGenTypes &CGT) : ABIInfo(CGT) {}
+  DefaultABIInfo(CodeGen::CodeGenTypes &CGT) : SwiftABIInfo(CGT) {}
 
   ABIArgInfo classifyReturnType(QualType RetTy) const;
   ABIArgInfo classifyArgumentType(QualType RetTy) const;
@@ -671,6 +671,14 @@ public:
                     QualType Ty) const override {
     return EmitVAArgInstr(CGF, VAListAddr, Ty, classifyArgumentType(Ty));
   }
+  bool shouldPassIndirectlyForSwift(ArrayRef<llvm::Type*> scalars,
+                                    bool asReturnValue) const override {
+    return occupiesMoreThan(CGT, scalars, /*total*/ 4);
+  }
+
+  bool isSwiftErrorInRegister() const override {
+    return false;
+  }
 };
 
 class DefaultTargetCodeGenInfo : public TargetCodeGenInfo {
diff --git a/lib/Sema/ParsedAttr.cpp b/lib/Sema/ParsedAttr.cpp
index 3dff0ad63e..cbb101a583 100644
--- a/lib/Sema/ParsedAttr.cpp
+++ b/lib/Sema/ParsedAttr.cpp
@@ -197,6 +197,14 @@ bool ParsedAttr::appliesToDecl(const Decl *D,
   return checkAttributeMatchRuleAppliesTo(D, MatchRule);
 }
 
+bool ParsedAttr::appliesToType(const QualType &T,
+                               attr::SubjectMatchRule MatchRule) const {
+  if (MatchRule == attr::SubjectMatchRule_function_type)
+    return T->isFunctionType();
+  else
+    return false;
+}
+
 void ParsedAttr::getMatchRules(
     const LangOptions &LangOpts,
     SmallVectorImpl<std::pair<attr::SubjectMatchRule, bool>> &MatchRules)
diff --git a/lib/Sema/SemaAttr.cpp b/lib/Sema/SemaAttr.cpp
index 8024e1a051..ea385dca46 100644
--- a/lib/Sema/SemaAttr.cpp
+++ b/lib/Sema/SemaAttr.cpp
@@ -662,7 +662,7 @@ void Sema::AddPragmaAttributes(Scope *S, Decl *D) {
     PragmaAttributeCurrentTargetDecl = D;
     ParsedAttributesView Attrs;
     Attrs.addAtEnd(Attribute);
-    ProcessDeclAttributeList(S, D, Attrs);
+    ProcessDeclAttributeList(S, D, Attrs, true, true);
     PragmaAttributeCurrentTargetDecl = nullptr;
   }
 }
diff --git a/lib/Sema/SemaDeclAttr.cpp b/lib/Sema/SemaDeclAttr.cpp
index c0fb3356ba..8df2b8acfd 100644
--- a/lib/Sema/SemaDeclAttr.cpp
+++ b/lib/Sema/SemaDeclAttr.cpp
@@ -4199,8 +4199,13 @@ static void handleGNUInlineAttr(Sema &S, Decl *D, const ParsedAttr &AL) {
                            AL.getAttributeSpellingListIndex()));
 }
 
-static void handleCallConvAttr(Sema &S, Decl *D, const ParsedAttr &AL) {
-  if (hasDeclarator(D)) return;
+static void handleCallConvAttr(Sema &S, Decl *D, const ParsedAttr &AL, bool FromPragma) {
+  if (hasDeclarator(D)) {
+    if (FromPragma) {
+      S.Diag(AL.getLoc(), diag::warn_cconv_knr); // todo
+    }
+    return;
+  }
 
   // Diagnostic is emitted elsewhere: here we store the (valid) AL
   // in the Decl node for syntactic reasoning, e.g., pretty-printing.
@@ -4295,9 +4300,14 @@ static void handleCallConvAttr(Sema &S, Decl *D, const ParsedAttr &AL) {
     D->addAttr(::new (S.Context) PreserveAllAttr(
         AL.getRange(), S.Context, AL.getAttributeSpellingListIndex()));
     return;
+  case ParsedAttr::AT_DefaultCall:
+    D->addAttr(::new (S.Context) DefaultCallAttr(
+        AL.getRange(), S.Context, AL.getAttributeSpellingListIndex()));
+    return;
   default:
     llvm_unreachable("unexpected attribute kind");
   }
+  // TODO useful to set frompragma? probably, but better to unify with the thing in SemaType
 }
 
 static void handleSuppressAttr(Sema &S, Decl *D, const ParsedAttr &AL) {
@@ -4337,6 +4347,7 @@ bool Sema::CheckCallingConvAttr(const ParsedAttr &Attrs, CallingConv &CC,
   }
 
   // TODO: diagnose uses of these conventions on the wrong target.
+  bool DefaultCall = false;
   switch (Attrs.getKind()) {
   case ParsedAttr::AT_CDecl:
     CC = CC_C;
@@ -4397,17 +4408,25 @@ bool Sema::CheckCallingConvAttr(const ParsedAttr &Attrs, CallingConv &CC,
   case ParsedAttr::AT_PreserveAll:
     CC = CC_PreserveAll;
     break;
+  case ParsedAttr::AT_DefaultCall:
+    DefaultCall = true;
+    break;
   default: llvm_unreachable("unexpected attribute kind");
   }
 
-  const TargetInfo &TI = Context.getTargetInfo();
-  TargetInfo::CallingConvCheckResult A = TI.checkCallingConvention(CC);
-  if (A != TargetInfo::CCCR_OK) {
-    if (A == TargetInfo::CCCR_Warning)
-      Diag(Attrs.getLoc(), diag::warn_cconv_ignored) << Attrs;
+  if (!DefaultCall) {
+    const TargetInfo &TI = Context.getTargetInfo();
+    TargetInfo::CallingConvCheckResult A = TI.checkCallingConvention(CC);
+    if (A != TargetInfo::CCCR_OK) {
+      if (A == TargetInfo::CCCR_Warning)
+        Diag(Attrs.getLoc(), diag::warn_cconv_ignored) << Attrs;
+      DefaultCall = true;
+    }
+  }
 
-    // This convention is not valid for the target. Use the default function or
-    // method calling convention.
+  if (DefaultCall) {
+    // This convention is not valid for the target, or we explicitly asked for
+    // the default. Use the default function or method calling convention.
     bool IsCXXMethod = false, IsVariadic = false;
     if (FD) {
       IsCXXMethod = FD->isCXXInstanceMember();
@@ -6011,7 +6030,8 @@ static void handleDestroyAttr(Sema &S, Decl *D, const ParsedAttr &A) {
 /// silently ignore it if a GNU attribute.
 static void ProcessDeclAttribute(Sema &S, Scope *scope, Decl *D,
                                  const ParsedAttr &AL,
-                                 bool IncludeCXX11Attributes) {
+                                 bool IncludeCXX11Attributes,
+                                 bool FromPragma) {
   if (AL.isInvalid() || AL.getKind() == ParsedAttr::IgnoredAttribute)
     return;
 
@@ -6486,7 +6506,8 @@ static void ProcessDeclAttribute(Sema &S, Scope *scope, Decl *D,
   case ParsedAttr::AT_IntelOclBicc:
   case ParsedAttr::AT_PreserveMost:
   case ParsedAttr::AT_PreserveAll:
-    handleCallConvAttr(S, D, AL);
+  case ParsedAttr::AT_DefaultCall:
+    handleCallConvAttr(S, D, AL, FromPragma);
     break;
   case ParsedAttr::AT_Suppress:
     handleSuppressAttr(S, D, AL);
@@ -6687,12 +6708,13 @@ static void ProcessDeclAttribute(Sema &S, Scope *scope, Decl *D,
 /// attribute list to the specified decl, ignoring any type attributes.
 void Sema::ProcessDeclAttributeList(Scope *S, Decl *D,
                                     const ParsedAttributesView &AttrList,
-                                    bool IncludeCXX11Attributes) {
+                                    bool IncludeCXX11Attributes,
+                                    bool FromPragma) {
   if (AttrList.empty())
     return;
 
   for (const ParsedAttr &AL : AttrList)
-    ProcessDeclAttribute(*this, S, D, AL, IncludeCXX11Attributes);
+    ProcessDeclAttribute(*this, S, D, AL, IncludeCXX11Attributes, FromPragma);
 
   // FIXME: We should be able to handle these cases in TableGen.
   // GCC accepts
@@ -6763,7 +6785,7 @@ bool Sema::ProcessAccessDeclAttributeList(
     AccessSpecDecl *ASDecl, const ParsedAttributesView &AttrList) {
   for (const ParsedAttr &AL : AttrList) {
     if (AL.getKind() == ParsedAttr::AT_Annotate) {
-      ProcessDeclAttribute(*this, nullptr, ASDecl, AL, AL.isCXX11Attribute());
+      ProcessDeclAttribute(*this, nullptr, ASDecl, AL, AL.isCXX11Attribute(), false);
     } else {
       Diag(AL.getLoc(), diag::err_only_annotate_after_access_spec);
       return true;
diff --git a/lib/Sema/SemaDeclCXX.cpp b/lib/Sema/SemaDeclCXX.cpp
index 3261a7031d..6ac19e9b6a 100644
--- a/lib/Sema/SemaDeclCXX.cpp
+++ b/lib/Sema/SemaDeclCXX.cpp
@@ -6596,7 +6596,7 @@ void Sema::CheckExplicitlyDefaultedSpecialMember(CXXMethodDecl *MD) {
     FunctionProtoType::ExtProtoInfo EPI = Type->getExtProtoInfo();
     EPI.ExceptionSpec.Type = EST_Unevaluated;
     EPI.ExceptionSpec.SourceDecl = MD;
-    MD->setType(Context.getFunctionType(ReturnType,
+    MD->setType(GetFunctionTypeForImplicit(ReturnType,
                                         llvm::makeArrayRef(&ArgType,
                                                            ExpectedParams),
                                         EPI));
@@ -6651,7 +6651,7 @@ void Sema::CheckExplicitlyDefaultedMemberExceptionSpec(
   auto IES = computeImplicitExceptionSpec(*this, MD->getLocation(), MD);
   EPI.ExceptionSpec = IES.getExceptionSpec();
   const FunctionProtoType *ImplicitType = cast<FunctionProtoType>(
-    Context.getFunctionType(Context.VoidTy, None, EPI));
+    GetFunctionTypeForImplicit(Context.VoidTy, None, EPI));
 
   // Ensure that it matches.
   CheckEquivalentExceptionSpec(
@@ -8138,7 +8138,7 @@ QualType Sema::CheckConstructorDeclarator(Declarator &D, QualType R,
   EPI.TypeQuals = 0;
   EPI.RefQualifier = RQ_None;
 
-  return Context.getFunctionType(Context.VoidTy, Proto->getParamTypes(), EPI);
+  return GetFunctionTypeForImplicit(Context.VoidTy, Proto->getParamTypes(), EPI);
 }
 
 /// CheckConstructor - Checks a fully-formed constructor for
@@ -8343,7 +8343,7 @@ QualType Sema::CheckDestructorDeclarator(Declarator &D, QualType R,
   EPI.Variadic = false;
   EPI.TypeQuals = 0;
   EPI.RefQualifier = RQ_None;
-  return Context.getFunctionType(Context.VoidTy, None, EPI);
+  return GetFunctionTypeForImplicit(Context.VoidTy, None, EPI);
 }
 
 static void extendLeft(SourceRange &R, SourceRange Before) {
@@ -8519,7 +8519,7 @@ void Sema::CheckConversionDeclarator(Declarator &D, QualType &R,
   // of the errors above fired) and with the conversion type as the
   // return type.
   if (D.isInvalidType())
-    R = Context.getFunctionType(ConvType, None, Proto->getExtProtoInfo());
+    R = GetFunctionTypeForImplicit(ConvType, None, Proto->getExtProtoInfo());
 
   // C++0x explicit conversion operators.
   if (DS.isExplicitSpecified())
@@ -10887,7 +10887,7 @@ CXXConstructorDecl *Sema::DeclareImplicitDefaultConstructor(
 
   // Build an exception specification pointing back at this constructor.
   FunctionProtoType::ExtProtoInfo EPI = getImplicitMethodEPI(*this, DefaultCon);
-  DefaultCon->setType(Context.getFunctionType(Context.VoidTy, None, EPI));
+  DefaultCon->setType(GetFunctionTypeForImplicit(Context.VoidTy, None, EPI));
 
   // We don't need to use SpecialMemberIsTrivial here; triviality for default
   // constructors is easy to compute.
@@ -11006,7 +11006,7 @@ Sema::findInheritingConstructor(SourceLocation Loc,
   FunctionProtoType::ExtProtoInfo EPI = FPT->getExtProtoInfo();
   EPI.ExceptionSpec.Type = EST_Unevaluated;
   EPI.ExceptionSpec.SourceDecl = DerivedCtor;
-  DerivedCtor->setType(Context.getFunctionType(FPT->getReturnType(),
+  DerivedCtor->setType(GetFunctionTypeForImplicit(FPT->getReturnType(),
                                                FPT->getParamTypes(), EPI));
 
   // Build the parameter declarations.
@@ -11160,7 +11160,7 @@ CXXDestructorDecl *Sema::DeclareImplicitDestructor(CXXRecordDecl *ClassDecl) {
 
   // Build an exception specification pointing back at this destructor.
   FunctionProtoType::ExtProtoInfo EPI = getImplicitMethodEPI(*this, Destructor);
-  Destructor->setType(Context.getFunctionType(Context.VoidTy, None, EPI));
+  Destructor->setType(GetFunctionTypeForImplicit(Context.VoidTy, None, EPI));
 
   // We don't need to use SpecialMemberIsTrivial here; triviality for
   // destructors is easy to compute.
@@ -11283,7 +11283,7 @@ void Sema::AdjustDestructorExceptionSpec(CXXDestructorDecl *Destructor) {
   FunctionProtoType::ExtProtoInfo EPI = DtorType->getExtProtoInfo();
   EPI.ExceptionSpec.Type = EST_Unevaluated;
   EPI.ExceptionSpec.SourceDecl = Destructor;
-  Destructor->setType(Context.getFunctionType(Context.VoidTy, None, EPI));
+  Destructor->setType(GetFunctionTypeForImplicit(Context.VoidTy, None, EPI));
 
   // FIXME: If the destructor has a body that could throw, and the newly created
   // spec doesn't allow exceptions, we should emit a warning, because this
@@ -11763,7 +11763,7 @@ CXXMethodDecl *Sema::DeclareImplicitCopyAssignment(CXXRecordDecl *ClassDecl) {
   // Build an exception specification pointing back at this member.
   FunctionProtoType::ExtProtoInfo EPI =
       getImplicitMethodEPI(*this, CopyAssignment);
-  CopyAssignment->setType(Context.getFunctionType(RetType, ArgType, EPI));
+  CopyAssignment->setType(GetFunctionTypeForImplicit(RetType, ArgType, EPI));
 
   // Add the parameter to the operator.
   ParmVarDecl *FromParam = ParmVarDecl::Create(Context, CopyAssignment,
@@ -12084,7 +12084,7 @@ CXXMethodDecl *Sema::DeclareImplicitMoveAssignment(CXXRecordDecl *ClassDecl) {
   // Build an exception specification pointing back at this member.
   FunctionProtoType::ExtProtoInfo EPI =
       getImplicitMethodEPI(*this, MoveAssignment);
-  MoveAssignment->setType(Context.getFunctionType(RetType, ArgType, EPI));
+  MoveAssignment->setType(GetFunctionTypeForImplicit(RetType, ArgType, EPI));
 
   // Add the parameter to the operator.
   ParmVarDecl *FromParam = ParmVarDecl::Create(Context, MoveAssignment,
@@ -12462,7 +12462,7 @@ CXXConstructorDecl *Sema::DeclareImplicitCopyConstructor(
   FunctionProtoType::ExtProtoInfo EPI =
       getImplicitMethodEPI(*this, CopyConstructor);
   CopyConstructor->setType(
-      Context.getFunctionType(Context.VoidTy, ArgType, EPI));
+      GetFunctionTypeForImplicit(Context.VoidTy, ArgType, EPI));
 
   // Add the parameter to the constructor.
   ParmVarDecl *FromParam = ParmVarDecl::Create(Context, CopyConstructor,
@@ -12592,7 +12592,7 @@ CXXConstructorDecl *Sema::DeclareImplicitMoveConstructor(
   FunctionProtoType::ExtProtoInfo EPI =
       getImplicitMethodEPI(*this, MoveConstructor);
   MoveConstructor->setType(
-      Context.getFunctionType(Context.VoidTy, ArgType, EPI));
+      GetFunctionTypeForImplicit(Context.VoidTy, ArgType, EPI));
 
   // Add the parameter to the constructor.
   ParmVarDecl *FromParam = ParmVarDecl::Create(Context, MoveConstructor,
diff --git a/lib/Sema/SemaType.cpp b/lib/Sema/SemaType.cpp
index 27dbf70498..306fa64905 100644
--- a/lib/Sema/SemaType.cpp
+++ b/lib/Sema/SemaType.cpp
@@ -121,7 +121,8 @@ static void diagnoseBadTypeAttribute(Sema &S, const ParsedAttr &attr,
   case ParsedAttr::AT_Pcs:                                                     \
   case ParsedAttr::AT_IntelOclBicc:                                            \
   case ParsedAttr::AT_PreserveMost:                                            \
-  case ParsedAttr::AT_PreserveAll
+  case ParsedAttr::AT_PreserveAll:                                             \
+  case ParsedAttr::AT_DefaultCall
 
 // Function type attributes.
 #define FUNCTION_TYPE_ATTRS_CASELIST                                           \
@@ -312,14 +313,16 @@ enum TypeAttrLocation {
   /// The attribute is part of a DeclaratorChunk.
   TAL_DeclChunk,
   /// The attribute is immediately after the declaration's name.
-  TAL_DeclName
+  TAL_DeclName,
+  /// The attribute is from a `#pragma attribute`.
+  TAL_Pragma
 };
 
 static void processTypeAttrs(TypeProcessingState &state, QualType &type,
                              TypeAttrLocation TAL, ParsedAttributesView &attrs);
 
 static bool handleFunctionTypeAttr(TypeProcessingState &state, ParsedAttr &attr,
-                                   QualType &type);
+                                   QualType &type, bool FromPragma = false);
 
 static bool handleMSPointerTypeQualifierAttr(TypeProcessingState &state,
                                              ParsedAttr &attr, QualType &type);
@@ -3912,6 +3915,31 @@ static TypeSourceInfo *
 GetTypeSourceInfoForDeclarator(TypeProcessingState &State,
                                QualType T, TypeSourceInfo *ReturnTypeInfo);
 
+static void addPragmaAttributesForType(Sema &S, TypeProcessingState &state, QualType &T) {
+  if (S.PragmaAttributeStack.empty())
+    return;
+  for (auto I = S.PragmaAttributeStack.rbegin(), E = S.PragmaAttributeStack.rend();
+       I != E; ++I) {
+    ParsedAttr *Attribute = I->Attribute;
+    assert(Attribute && "Expected an attribute");
+
+    // Ensure that the attribute can be applied to the given declaration.
+    bool Applies = false;
+    for (const auto &Rule : I->MatchRules) {
+      if (Attribute->appliesToType(T, Rule)) {
+        Applies = true;
+        break;
+      }
+    }
+    if (!Applies)
+      continue;
+    I->IsUsed = true;
+    ParsedAttributesView Attrs;
+    Attrs.addAtEnd(Attribute);
+    processTypeAttrs(state, T, TAL_Pragma, Attrs);
+  }
+}
+
 static TypeSourceInfo *GetFullTypeForDeclarator(TypeProcessingState &state,
                                                 QualType declSpecType,
                                                 TypeSourceInfo *TInfo) {
@@ -4282,10 +4310,12 @@ static TypeSourceInfo *GetFullTypeForDeclarator(TypeProcessingState &state,
   // Walk the DeclTypeInfo, building the recursive type as we go.
   // DeclTypeInfos are ordered from the identifier out, which is
   // opposite of what we want :).
+  bool DeclTypeIsFunction;
   for (unsigned i = 0, e = D.getNumTypeObjects(); i != e; ++i) {
     unsigned chunkIndex = e - i - 1;
     state.setCurrentChunkIndex(chunkIndex);
     DeclaratorChunk &DeclType = D.getTypeObject(chunkIndex);
+    DeclTypeIsFunction = DeclType.Kind == DeclaratorChunk::Function;
     IsQualifiedFunction &= DeclType.Kind == DeclaratorChunk::Paren;
     switch (DeclType.Kind) {
     case DeclaratorChunk::Paren:
@@ -4888,6 +4918,8 @@ static TypeSourceInfo *GetFullTypeForDeclarator(TypeProcessingState &state,
 
     // See if there are any attributes on this declarator chunk.
     processTypeAttrs(state, T, TAL_DeclChunk, DeclType.getAttrs());
+    if (i + 1 < e && DeclTypeIsFunction)
+      addPragmaAttributesForType(S, state, T);
   }
 
   // GNU warning -Wstrict-prototypes
@@ -5016,6 +5048,8 @@ static TypeSourceInfo *GetFullTypeForDeclarator(TypeProcessingState &state,
 
   // Apply any undistributed attributes from the declarator.
   processTypeAttrs(state, T, TAL_DeclName, D.getAttributes());
+  if (DeclTypeIsFunction)
+    addPragmaAttributesForType(S, state, T);
 
   // Diagnose any ignored type attributes.
   state.diagnoseIgnoredTypeAttrs(T);
@@ -6176,7 +6210,7 @@ namespace {
     const FunctionType *Fn;
     SmallVector<unsigned char /*WrapKind*/, 8> Stack;
 
-    FunctionTypeUnwrapper(Sema &S, QualType T) : Original(T) {
+    FunctionTypeUnwrapper(const Sema &S, QualType T) : Original(T) {
       while (true) {
         const Type *Ty = T.getTypePtr();
         if (isa<FunctionType>(Ty)) {
@@ -6678,18 +6712,99 @@ static Attr *getCCTypeAttr(ASTContext &Ctx, ParsedAttr &Attr) {
     return createSimpleAttr<PreserveMostAttr>(Ctx, Attr);
   case ParsedAttr::AT_PreserveAll:
     return createSimpleAttr<PreserveAllAttr>(Ctx, Attr);
+  case ParsedAttr::AT_DefaultCall:
+    return createSimpleAttr<DefaultCallAttr>(Ctx, Attr);
   }
   llvm_unreachable("unexpected attribute kind!");
 }
 
+// XXX this is awful and needs to be redone completely
+static bool handleCallingConvAttr(Sema &S, TypeProcessingState *state, ParsedAttr &attr,
+                                   QualType &type, FunctionTypeUnwrapper &unwrapped, bool FromPragma, SourceLocation DiagLoc) {
+  CallingConv CC;
+  if (S.CheckCallingConvAttr(attr, CC))
+    return true;
+
+  const FunctionType *fn = unwrapped.get();
+  CallingConv CCOld = fn->getCallConv();
+  Attr *CCAttr = getCCTypeAttr(S.Context, attr);
+
+  if (CCOld != CC) {
+    // Error out on when there's already an attribute on the type
+    // and the CCs don't match.
+    if (S.getCallingConvAttributedType(type)) {
+      if (!FromPragma) {
+        S.Diag(DiagLoc, diag::err_attributes_are_not_compatible)
+          << FunctionType::getNameForCallConv(CC)
+          << FunctionType::getNameForCallConv(CCOld);
+        attr.setInvalid();
+      }
+      return true;
+    }
+  }
+
+  // Diagnose use of variadic functions with calling conventions that
+  // don't support them (e.g. because they're callee-cleanup).
+  // We delay warning about this on unprototyped function declarations
+  // until after redeclaration checking, just in case we pick up a
+  // prototype that way.  And apparently we also "delay" warning about
+  // unprototyped function types in general, despite not necessarily having
+  // much ability to diagnose it later.
+  if (!supportsVariadicCall(CC)) {
+    const FunctionProtoType *FnP = dyn_cast<FunctionProtoType>(fn);
+    if (FnP && FnP->isVariadic()) {
+      unsigned DiagID = diag::err_cconv_varargs;
+
+      // stdcall and fastcall are ignored with a warning for GCC and MS
+      // compatibility.
+      bool IsInvalid = true;
+      if (CC == CC_X86StdCall || CC == CC_X86FastCall) {
+        DiagID = diag::warn_cconv_varargs;
+        IsInvalid = false;
+      }
+
+      S.Diag(DiagLoc, DiagID) << FunctionType::getNameForCallConv(CC);
+      if (IsInvalid) attr.setInvalid();
+      return true;
+    }
+  }
+
+  // Also diagnose fastcall with regparm.
+  if (CC == CC_X86FastCall && fn->getHasRegParm()) {
+    S.Diag(DiagLoc, diag::err_attributes_are_not_compatible)
+        << "regparm" << FunctionType::getNameForCallConv(CC_X86FastCall);
+    attr.setInvalid();
+    return true;
+  }
+
+  // Modify the CC from the wrapped function type, wrap it all back, and then
+  // wrap the whole thing in an AttributedType as written.  The modified type
+  // might have a different CC if we ignored the attribute.
+  QualType Equivalent;
+  if (CCOld == CC) {
+    Equivalent = type;
+  } else {
+    auto EI = unwrapped.get()->getExtInfo().withCallingConv(CC);
+    Equivalent =
+      unwrapped.wrap(S, S.Context.adjustFunctionType(unwrapped.get(), EI));
+  }
+  if (state)
+    type = state->getAttributedType(CCAttr, type, Equivalent);
+  else
+    type = S.Context.getAttributedType(CCAttr->getKind(), type, Equivalent);
+  return true;
+}
+
 /// Process an individual function attribute.  Returns true to
 /// indicate that the attribute was handled, false if it wasn't.
 static bool handleFunctionTypeAttr(TypeProcessingState &state, ParsedAttr &attr,
-                                   QualType &type) {
+                                   QualType &type, bool FromPragma) {
   Sema &S = state.getSema();
 
   FunctionTypeUnwrapper unwrapped(S, type);
 
+  SourceLocation DiagLoc = FromPragma ? state.getDeclarator().getBeginLoc() : attr.getLoc();
+
   if (attr.getKind() == ParsedAttr::AT_NoReturn) {
     if (S.CheckAttrNoArgs(attr))
       return true;
@@ -6714,7 +6829,7 @@ static bool handleFunctionTypeAttr(TypeProcessingState &state, ParsedAttr &attr,
       return false;
 
     // Check whether the return type is reasonable.
-    if (S.checkNSReturnsRetainedReturnType(attr.getLoc(),
+    if (S.checkNSReturnsRetainedReturnType(DiagLoc,
                                            unwrapped.get()->getReturnType()))
       return true;
 
@@ -6747,7 +6862,7 @@ static bool handleFunctionTypeAttr(TypeProcessingState &state, ParsedAttr &attr,
 
   if (attr.getKind() == ParsedAttr::AT_AnyX86NoCfCheck) {
     if (!S.getLangOpts().CFProtectionBranch) {
-      S.Diag(attr.getLoc(), diag::warn_nocf_check_attribute_ignored);
+      S.Diag(DiagLoc, diag::warn_nocf_check_attribute_ignored);
       attr.setInvalid();
       return true;
     }
@@ -6779,7 +6894,7 @@ static bool handleFunctionTypeAttr(TypeProcessingState &state, ParsedAttr &attr,
     const FunctionType *fn = unwrapped.get();
     CallingConv CC = fn->getCallConv();
     if (CC == CC_X86FastCall) {
-      S.Diag(attr.getLoc(), diag::err_attributes_are_not_compatible)
+      S.Diag(DiagLoc, diag::err_attributes_are_not_compatible)
         << FunctionType::getNameForCallConv(CC)
         << "regparm";
       attr.setInvalid();
@@ -6796,73 +6911,7 @@ static bool handleFunctionTypeAttr(TypeProcessingState &state, ParsedAttr &attr,
   if (!unwrapped.isFunctionType()) return false;
 
   // Otherwise, a calling convention.
-  CallingConv CC;
-  if (S.CheckCallingConvAttr(attr, CC))
-    return true;
-
-  const FunctionType *fn = unwrapped.get();
-  CallingConv CCOld = fn->getCallConv();
-  Attr *CCAttr = getCCTypeAttr(S.Context, attr);
-
-  if (CCOld != CC) {
-    // Error out on when there's already an attribute on the type
-    // and the CCs don't match.
-    if (S.getCallingConvAttributedType(type)) {
-      S.Diag(attr.getLoc(), diag::err_attributes_are_not_compatible)
-        << FunctionType::getNameForCallConv(CC)
-        << FunctionType::getNameForCallConv(CCOld);
-      attr.setInvalid();
-      return true;
-    }
-  }
-
-  // Diagnose use of variadic functions with calling conventions that
-  // don't support them (e.g. because they're callee-cleanup).
-  // We delay warning about this on unprototyped function declarations
-  // until after redeclaration checking, just in case we pick up a
-  // prototype that way.  And apparently we also "delay" warning about
-  // unprototyped function types in general, despite not necessarily having
-  // much ability to diagnose it later.
-  if (!supportsVariadicCall(CC)) {
-    const FunctionProtoType *FnP = dyn_cast<FunctionProtoType>(fn);
-    if (FnP && FnP->isVariadic()) {
-      unsigned DiagID = diag::err_cconv_varargs;
-
-      // stdcall and fastcall are ignored with a warning for GCC and MS
-      // compatibility.
-      bool IsInvalid = true;
-      if (CC == CC_X86StdCall || CC == CC_X86FastCall) {
-        DiagID = diag::warn_cconv_varargs;
-        IsInvalid = false;
-      }
-
-      S.Diag(attr.getLoc(), DiagID) << FunctionType::getNameForCallConv(CC);
-      if (IsInvalid) attr.setInvalid();
-      return true;
-    }
-  }
-
-  // Also diagnose fastcall with regparm.
-  if (CC == CC_X86FastCall && fn->getHasRegParm()) {
-    S.Diag(attr.getLoc(), diag::err_attributes_are_not_compatible)
-        << "regparm" << FunctionType::getNameForCallConv(CC_X86FastCall);
-    attr.setInvalid();
-    return true;
-  }
-
-  // Modify the CC from the wrapped function type, wrap it all back, and then
-  // wrap the whole thing in an AttributedType as written.  The modified type
-  // might have a different CC if we ignored the attribute.
-  QualType Equivalent;
-  if (CCOld == CC) {
-    Equivalent = type;
-  } else {
-    auto EI = unwrapped.get()->getExtInfo().withCallingConv(CC);
-    Equivalent =
-      unwrapped.wrap(S, S.Context.adjustFunctionType(unwrapped.get(), EI));
-  }
-  type = state.getAttributedType(CCAttr, type, Equivalent);
-  return true;
+  return handleCallingConvAttr(S, &state, attr, type, unwrapped, FromPragma, DiagLoc);
 }
 
 bool Sema::hasExplicitCallingConv(QualType &T) {
@@ -7396,6 +7445,7 @@ static void processTypeAttrs(TypeProcessingState &state, QualType &type,
       // '__kindof' must be part of the decl-specifiers.
       switch (TAL) {
       case TAL_DeclSpec:
+      case TAL_Pragma:
         break;
 
       case TAL_DeclChunk:
@@ -7421,7 +7471,8 @@ static void processTypeAttrs(TypeProcessingState &state, QualType &type,
       // declaration-specifiers.
       if (TAL == TAL_DeclSpec)
         distributeFunctionTypeAttrFromDeclSpec(state, attr, type);
-
+      else if (TAL == TAL_Pragma)
+        assert(handleFunctionTypeAttr(state, attr, type, true));
       // Otherwise, handle the possible delays.
       else if (!handleFunctionTypeAttr(state, attr, type))
         distributeFunctionTypeAttr(state, attr, type);
@@ -8158,3 +8209,39 @@ QualType Sema::BuildAtomicType(QualType T, SourceLocation Loc) {
   // Build the pointer type.
   return Context.getAtomicType(T);
 }
+
+QualType Sema::GetFunctionTypeForImplicit(QualType ResultTy, ArrayRef<QualType> Args,
+                                    const FunctionProtoType::ExtProtoInfo &EPI) {
+  QualType T = Context.getFunctionType(ResultTy, Args, EPI);
+  if (PragmaAttributeStack.empty())
+    return T;
+  for (auto I = PragmaAttributeStack.rbegin(), E = PragmaAttributeStack.rend();
+       I != E; ++I) {
+    ParsedAttr *Attribute = I->Attribute;
+    assert(Attribute && "Expected an attribute");
+
+    // Ensure that the attribute can be applied to the given declaration.
+    bool Applies = false;
+    for (const auto &Rule : I->MatchRules) {
+      if (Attribute->appliesToType(T, Rule)) {
+        Applies = true;
+        break;
+      }
+    }
+    if (!Applies)
+      continue;
+    FunctionTypeUnwrapper unwrapped(*this, T);
+    switch (Attribute->getKind()) {
+    CALLING_CONV_ATTRS_CASELIST:
+      I->IsUsed = true;
+      // TODO this loc is bogus
+      handleCallingConvAttr(*this, nullptr, *Attribute, T, unwrapped, true, Attribute->getLoc());
+      break;
+    default:
+      break;
+    }
+  }
+
+  return T;
+}
+
diff --git a/utils/TableGen/ClangAttrEmitter.cpp b/utils/TableGen/ClangAttrEmitter.cpp
index 59eab39773..dad9fc646e 100644
--- a/utils/TableGen/ClangAttrEmitter.cpp
+++ b/utils/TableGen/ClangAttrEmitter.cpp
@@ -1693,7 +1693,9 @@ struct AttributeSubjectMatchRule {
   }
 
   // Abstract rules are used only for sub-rules
-  bool isAbstractRule() const { return getSubjects().empty(); }
+  bool isAbstractRule() const {
+    (Constraint ? Constraint : MetaSubject)->getValueAsBit("Abstract");
+  }
 
   StringRef getName() const {
     return (Constraint ? Constraint : MetaSubject)->getValueAsString("Name");
@@ -3358,9 +3360,10 @@ emitAttributeMatchRules(PragmaClangAttributeSupport &PragmaAttributeSupport,
       continue;
     }
     std::vector<Record *> Subjects = Rule.getSubjects();
-    assert(!Subjects.empty() && "Missing subjects");
     OS << "  case " << Rule.getEnumValue() << ":\n";
     OS << "    return ";
+    if (Subjects.empty())
+      OS << "false";
     for (auto I = Subjects.begin(), E = Subjects.end(); I != E; ++I) {
       // If the subject has custom code associated with it, use the function
       // that was generated for GenerateAppertainsTo to check if the declaration
